<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>API - Tag - Melchi</title>
        <link>https://melchi.me/tags/api/</link>
        <description>API - Tag - Melchi</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 01 Dec 2019 21:57:40 &#43;0800</lastBuildDate><atom:link href="https://melchi.me/tags/api/" rel="self" type="application/rss+xml" /><item>
    <title>Rate limiting in Golang HTTP client</title>
    <link>https://melchi.me/posts/golang/</link>
    <pubDate>Sun, 01 Dec 2019 21:57:40 &#43;0800</pubDate>
    <author>Melchi</author>
    <guid>https://melchi.me/posts/golang/</guid>
    <description><![CDATA[I’ve been doing some interesting work with the team at MFloW writing HTTP clients that consume financial data and it’s been eye-opening to see how different API platforms choose to protect their resources. Best practices for client side rate-limiting seems to be scarce when compared to sever-side on the web. So here are my thoughts on the subject and some code samples.
Understanding server-side rate-limiting Most API endpoints implement resource consumption quotas in the form of rate limits.]]></description>
</item>
</channel>
</rss>
